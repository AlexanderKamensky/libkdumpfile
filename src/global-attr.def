/* Definitions for global (but not static) attributes
 *
 * To use this file, provide a definition for the ATTR() macro:
 *
 *   ATTR(dir, key, id, type, ctype)
 *
 * @param dir    Directory identifier (without the dir_ prefix).
 * @param key    Key name (a constant C string).
 * @param id     C identifier.
 * @param type   Attribute type (kdump_attr_type).
 * @param ctype  Suggested C type for the attribute.
 *
 * The variadic argument can be used to pass additional @c attr_template
 * initialization.
 *
 * A typical stanza is:
 * #define ATTR(dir, key, field, type, ctype, ...) \
 *   // use macro arguments to construct whatever you need
 * #include "global-attr.def"
 * #undef ATTR
 */

/* base hierarchy */
ATTR(root, "", dir_root, directory, struct attr_data *)
ATTR(root, "arch", dir_arch, directory, struct attr_data *)
ATTR(root, "cache", dir_cache, directory, struct attr_data *)
ATTR(root, "cpu", dir_cpu, directory, struct attr_data *)
ATTR(root, "format", dir_format, directory, struct attr_data *)
ATTR(root, "linux", dir_linux, directory, struct attr_data *)

/* cache */
ATTR(cache, "size", cache_size, number, unsigned, .ops = &cache_size_ops)

/* format name */
ATTR(format, "name", format_name, string, const char *)
ATTR(format, "longname", format_longname, string, const char *)

/* utsname */
ATTR(linux, "uts", dir_linux_uts, directory, struct attr_data *)
ATTR(linux_uts, "sysname", linux_uts_sysname, string, const char *)
ATTR(linux_uts, "nodename", linux_uts_nodename, string, const char *)
ATTR(linux_uts, "release", linux_uts_release, string, const char *)
ATTR(linux_uts, "version", linux_uts_version, string, const char *)
ATTR(linux_uts, "machine", linux_uts_machine, string, const char *)
ATTR(linux_uts, "domainname", linux_uts_domainname, string, const char *)

/* Linux vmcoreinfo */
ATTR(linux, "vmcoreinfo", dir_linux_vmcoreinfo, directory, struct attr_data *)
ATTR(linux_vmcoreinfo, "lines", linux_vmcoreinfo_lines,
     directory, struct attr_data *)
ATTR(linux_vmcoreinfo, "raw", linux_vmcoreinfo_raw, string, const char *)
ATTR(linux_vmcoreinfo, "LENGTH", linux_length, directory, struct attr_data *)
ATTR(linux_vmcoreinfo, "NUMBER", linux_number, directory, struct attr_data *)
ATTR(linux_vmcoreinfo, "OFFSET", linux_offset, directory, struct attr_data *)
ATTR(linux_vmcoreinfo, "SIZE", linux_size, directory, struct attr_data *)
ATTR(linux_vmcoreinfo, "SYMBOL", linux_symbol, directory, struct attr_data *)

/* Xen */
ATTR(root, "xen", dir_xen, directory, struct attr_data *)
ATTR(xen, "p2m_mfn", xen_p2m_mfn, address, kdump_pfn_t)
ATTR(xen, "phys_start", xen_phys_start, address, kdump_paddr)
ATTR(xen, "version", dir_xen_version, directory, struct attr_data *)
ATTR(xen_version, "major", xen_ver_major, number, unsigned long)
ATTR(xen_version, "minor", xen_ver_minor, number, unsigned long)
ATTR(xen_version, "extra", xen_ver_extra, string, const char *)
ATTR(xen_version, "extra_addr", xen_ver_extra_addr, address, kdump_vaddr_t)

/* Xen vmcoreinfo */
ATTR(xen, "vmcoreinfo", dir_xen_vmcoreinfo, directory, struct attr_data *)
ATTR(xen_vmcoreinfo, "lines", xen_vmcoreinfo_lines,
     directory, struct attr_data *)
ATTR(xen_vmcoreinfo, "raw", xen_vmcoreinfo_raw, string, const char *)
ATTR(xen_vmcoreinfo, "LENGTH", xen_length, directory, struct attr_data *)
ATTR(xen_vmcoreinfo, "NUMBER", xen_number, directory, struct attr_data *)
ATTR(xen_vmcoreinfo, "OFFSET", xen_offset, directory, struct attr_data *)
ATTR(xen_vmcoreinfo, "SIZE", xen_size, directory, struct attr_data *)
ATTR(xen_vmcoreinfo, "SYMBOL", xen_symbol, directory, struct attr_data *)
